<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan Meeus</title>
    <link>https://dylanmeeus.github.io/</link>
    <description>Recent content on Dylan Meeus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 13 Jul 2020 19:15:32 +0200</lastBuildDate>
    
	<atom:link href="https://dylanmeeus.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Audio From Scratch: Part2, Anatomy of a wave (file)</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</link>
      <pubDate>Mon, 13 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</guid>
      <description>In our last post we have looked at how we can create a simple binary sound file. By creating a sine wave with exponential decay, we can get the effect of a single note playing.
It&amp;rsquo;s good to know what these types of files look like. In the real world however you&amp;rsquo;ll usually encounter files that are a bit more complex. One of the common formats to find audio in is the WAVE file format, normally denoted with the extension .</description>
    </item>
    
    <item>
      <title>Audio From Scratch: Part 1, generating sounds</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</link>
      <pubDate>Mon, 13 Jul 2020 18:43:21 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</guid>
      <description>Audio from scratch: generating sound In my &amp;lsquo;audio from scratch&amp;rsquo; series we will take a look at various ways in which we can manipulate audio data with Go. We&amp;rsquo;ll look at the anatomy of a wave file, how to apply stereo panning, converting mono files to stereo, how to work with breakpoint files through linear interpolation, etc.
But, in this post we’ll be using Go to create sound from scratch in binary format.</description>
    </item>
    
    <item>
      <title>Bienvenido a mi blog!</title>
      <link>https://dylanmeeus.github.io/spanish/bienvenido-blog/</link>
      <pubDate>Sun, 12 Jul 2020 21:14:03 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/spanish/bienvenido-blog/</guid>
      <description>Bienvenido a mi blog! Desde hace cuatro años estudio español. Para praticar mas he decidido empezar un blog en español. Normalmente siempre escribo de la tecnologiá y la programación pero en este parte de mi blog voy a escribir de cada cosa que me parace interesante. Recién leí un articulo de Joel Hooks &amp;lsquo;digital carden&amp;rsquo; en lo que Joel escribió que su blog era un jardin digital. Me gusta applicar este idea aqui (también en mi blog en inglés) - no quiero definir mi blog en solo 1 tema.</description>
    </item>
    
    <item>
      <title>Hasgo: how does it work?</title>
      <link>https://dylanmeeus.github.io/posts/hasgo/</link>
      <pubDate>Sat, 25 May 2019 21:29:58 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/hasgo/</guid>
      <description>What is Hasgo? Hasgo is a code generator that can be used to generate functions that work on slices. We don&amp;rsquo;t have generics in Go, which I think is a good thing, but we can generate code with go:generate to work on different types.
Hasgo does just this, we write functions and then say for which types we want to generate these functions. For our Ints, the generation looks like this:</description>
    </item>
    
    <item>
      <title>go set benchmark</title>
      <link>https://dylanmeeus.github.io/posts/go-set-benchmark/</link>
      <pubDate>Mon, 15 Apr 2019 22:15:11 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/go-set-benchmark/</guid>
      <description>Go does not have a set datastructure. A common pattern is to mimick a set by using a map where the key is the &amp;ldquo;set entry&amp;rdquo; and the value does not matter.
In a discussion on hackernews recently, we discussed two similar implementations for a set, namely:
 map[type]bool map[type]struct{}  They are almost identical, and whilst I really like the first definition it was brought to my attention that the second might be favourable for performance reasons.</description>
    </item>
    
    <item>
      <title>Psychology of Computer Programming</title>
      <link>https://dylanmeeus.github.io/posts/psychology-computer-programming/</link>
      <pubDate>Wed, 27 Mar 2019 21:32:53 +0100</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/psychology-computer-programming/</guid>
      <description>Recently I have read The Psychology of Computer Programming, written by Gerald M. Weinberg. The book was originally published in 1971, though it got republished in 2011. (I read it on a kindle paperwhite and it looked great! So don&amp;rsquo;t worry about the age of the book in case you fear it won&amp;rsquo;t look good in e-book format).
Even though the book was written in a time before the public internet, Java, Javascript, smartphones and many more things we take for granted today, a lot of the content still rings true today.</description>
    </item>
    
    <item>
      <title>Version 2.0 of my blog :)</title>
      <link>https://dylanmeeus.github.io/posts/new-blog/</link>
      <pubDate>Fri, 22 Mar 2019 23:33:01 +0100</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/new-blog/</guid>
      <description>The past After two years of not having written anything for my blog, I&amp;rsquo;ve decided it was time to start anew.
My old blog was created using WordPress in mid-2011, it was the first blog that was hosted on a machine a friend and I rented rather than blogspot. Whilst the blog served it&amp;rsquo;s purpose and was home to 7 years of content-creation, I felt like it was time to change things up.</description>
    </item>
    
  </channel>
</rss>