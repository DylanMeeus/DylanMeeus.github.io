<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dylan Meeus</title>
    <link>https://dylanmeeus.github.io/</link>
    <description>Recent content on Dylan Meeus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 05 Oct 2020 21:38:02 +0200</lastBuildDate>
    
	<atom:link href="https://dylanmeeus.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Audio From Scratch With Go: Notes to Sound</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt13/</link>
      <pubDate>Mon, 05 Oct 2020 21:38:02 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt13/</guid>
      <description>In the last post the tune to &amp;lsquo;Brother Jacob&amp;rsquo; was generated using GoAudio. We started of by actually generating all the notes and their corresponding frequencies, and mapping them to a corresponding string, such that when we played A4 we would get a frequency of 440.
There were two problems with this from what I can tell, the first is that this approach is potentially repetitive. Each time we want to generate some music, we&amp;rsquo;re likely to generate a mapping of notes to frequencies.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Frère Jacques</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt12/</link>
      <pubDate>Sun, 13 Sep 2020 16:27:35 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt12/</guid>
      <description>In the last post I ended by saying we would be able to use GoAudio to generate some simple tunes. In this post we will actually put that to the test. Click the video to hear the end result :)
  Frère Jacques | Brother John Brother John / Frère Jacques is a popular nursing rhyme, and also one of the few things I was taught to play on the piano as a kid.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Harmonics</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt11/</link>
      <pubDate>Sat, 12 Sep 2020 13:04:29 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt11/</guid>
      <description>So far, we have seen how we can generate pure signals such as sine waves, square waves and triangle waves. These are handy signals for debugging and easy to generate, but in the real world instruments don&amp;rsquo;t generate such pure signals. For example, when plucking a guitar string it will vibrate along mutliple frequencies. These different vibrations are called the &amp;lsquo;harmonics&amp;rsquo;, which consist of the &amp;lsquo;fundamental&amp;rsquo; frequency + overtone frequencies. So the final sound that we hear is a combination of waves vibrating along these different frequencies.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: ADSR</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt10/</link>
      <pubDate>Sat, 05 Sep 2020 14:01:57 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt10/</guid>
      <description>With everything that we have added to our library so far we are almost capable of generated small tunes. One thing that&amp;rsquo;s missing to make it sound more &amp;lsquo;natural&amp;rsquo; is a way for the notes to start and stop.
In this post we will implement a type of envelope called &amp;ldquo;ADSR&amp;rdquo;, for &amp;ldquo;Attack, Decay, Sustain, Release&amp;rdquo;. Which will make the notes sound more natural as they are played in sequence.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Waveform tables</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt9/</link>
      <pubDate>Mon, 31 Aug 2020 21:01:02 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt9/</guid>
      <description>In the previous post the aim was to synthesize different waveforms, such as triangle waves and square waves. While this implementation gives us a good start, it is not as performant as we would like. All these waveforms were cyclical, so there was not an actual need to always calculate the right value in the moment.
The solution when you don&amp;rsquo;t want to recalculate something over and over is caching, and in the case of audio progamming we are going to store the waveform in a &amp;lsquo;table&amp;rsquo;, through which we can look up the values with an Oscillator.</description>
    </item>
    
    <item>
      <title>Software Engineering at Google</title>
      <link>https://dylanmeeus.github.io/posts/software-engineering-at-google/</link>
      <pubDate>Tue, 25 Aug 2020 19:57:06 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/software-engineering-at-google/</guid>
      <description>If there was one book this year that it was hard to avoid hearing about, it was &amp;ldquo;Software Engineering at Google&amp;rdquo;. As such, it was only a matter of time before I jumped on the bandwagon and decided to give it a read, but I&amp;rsquo;m happy I finally did!
I track my highlights and notes through my kindle / goodreads, and ended up with about 80 of them. In this blogpost, I&amp;rsquo;ll just go over some of what that I thought stood out in the book in one way or another.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Waveform synthesis</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt8/</link>
      <pubDate>Wed, 19 Aug 2020 20:45:50 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt8/</guid>
      <description>In the previous posts we first looked at how we can generate a sine wave as &amp;lsquo;raw&amp;rsquo; floats and interpret them using ffplay. Later we explored how to read / write .wave files and how to extract and create &amp;lsquo;automation tracks&amp;rsquo; using breakpoints.
As you might have noticed, we&amp;rsquo;ve never actually created .wave files from scratch with our own sound data. So, it&amp;rsquo;s about time to change that. In this blogpost we&amp;rsquo;ll look at how we can create a variety of basic soundwaves.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Extracting Breakpoints</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt7/</link>
      <pubDate>Sat, 08 Aug 2020 01:01:37 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt7/</guid>
      <description>So far everything we&amp;rsquo;ve done with breakpoints involved us creating a breakpoint file and using this to automate part of a track. Now we&amp;rsquo;ll take a look at how we can take an existing track and extract some breakpoints from this. For this post, we&amp;rsquo;ll take a look at extracting the amplitudes from the .wave files, as this is one of the most straightforward properties that we can extract.
There is nothing here that we&amp;rsquo;ve not seen in the previous posts, but rather we are going to combine what we&amp;rsquo;ve already learned to create a new tool to do this.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Automated Constant-Power Panning</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt6/</link>
      <pubDate>Thu, 06 Aug 2020 20:05:53 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt6/</guid>
      <description>In a previous post we have looked at how we can turn a mono audio signal into a stereo signal with an applied pan. One drawback of this program was that it was not possible to change the pan throughout the track, meaning that once a pan had been selected it would be applied to the entire song.
Now that we have implemented breakpoints, we can start looking at changing the pan (and other properties) throughout the duration of the track.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Breakpoints</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt5/</link>
      <pubDate>Tue, 28 Jul 2020 20:31:44 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt5/</guid>
      <description>Audio Breakpoints To clear up a potential mistake, this blogpost is about breakpoints for audio files, not the ones we use for debugging code ;-). A breakpoint file forms the basis for what is often called &amp;lsquo;envelopes&amp;rsquo; or &amp;lsquo;automation tracks&amp;rsquo; in DAWs.
They are simple files that contain pairs of timestamp:value data. With this simple structure, they allow us to specify what certain properties of the sound file should look like at various points in time.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Stereo panning</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt4/</link>
      <pubDate>Mon, 20 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt4/</guid>
      <description>In the previous post we have written code to change the amplitude of wave files.
Now we&amp;rsquo;ll take a look at how we can turn a mono wave file into a stereo wave file with optional panning, and explore how this is represented internally by the WAVE file format.
Channels The raw audio data inside a WAVE file consists of multiple frames. For now, we have called them &amp;lsquo;samples&amp;rsquo; although that is strictly speaking not entirely correct.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Changing the amplitude</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt3/</link>
      <pubDate>Sat, 18 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt3/</guid>
      <description>In the previous post we have written code to read and write WAVE files. So now it&amp;rsquo;s time to start using this functionality to actually manipulate some sound. The goal of this post is simple, we want to change the amplitude of a given .wave file.
For this, I will import the library we wrote in Part 2.
The code for this post is also on Github.
Changing amplitudes The program to change the amplitude will require three inputs:</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Anatomy of a wave (file)</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</link>
      <pubDate>Mon, 13 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</guid>
      <description>In our last post we have looked at how we can create a simple binary sound file. By creating a sine wave with exponential decay, we can get the effect of a single note playing.
It&amp;rsquo;s good to know what these types of files look like. In the real world however you&amp;rsquo;ll usually encounter files that are a bit more complex. One of the common formats to find audio in is the WAVE file format, normally denoted with the extension .</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Generating first sounds</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</link>
      <pubDate>Mon, 13 Jul 2020 18:43:21 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</guid>
      <description>Audio from scratch: generating sound In my &amp;lsquo;audio from scratch&amp;rsquo; series we will take a look at various ways in which we can manipulate audio data with Go. We&amp;rsquo;ll look at the anatomy of a wave file, how to apply stereo panning, converting mono files to stereo, how to work with breakpoint files through linear interpolation, etc.
But, in this post we’ll be using Go to create sound from scratch in binary format.</description>
    </item>
    
    <item>
      <title>Hasgo: how does it work?</title>
      <link>https://dylanmeeus.github.io/posts/hasgo/</link>
      <pubDate>Sat, 25 May 2019 21:29:58 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/hasgo/</guid>
      <description>What is Hasgo? Hasgo is a code generator that can be used to generate functions that work on slices. We don&amp;rsquo;t have generics in Go, which I think is a good thing, but we can generate code with go:generate to work on different types.
Hasgo does just this, we write functions and then say for which types we want to generate these functions. For our Ints, the generation looks like this:</description>
    </item>
    
    <item>
      <title>go set benchmark</title>
      <link>https://dylanmeeus.github.io/posts/go-set-benchmark/</link>
      <pubDate>Mon, 15 Apr 2019 22:15:11 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/go-set-benchmark/</guid>
      <description>Go does not have a set datastructure. A common pattern is to mimick a set by using a map where the key is the &amp;ldquo;set entry&amp;rdquo; and the value does not matter.
In a discussion on hackernews recently, we discussed two similar implementations for a set, namely:
 map[type]bool map[type]struct{}  They are almost identical, and whilst I really like the first definition it was brought to my attention that the second might be favourable for performance reasons.</description>
    </item>
    
    <item>
      <title>Psychology of Computer Programming</title>
      <link>https://dylanmeeus.github.io/posts/psychology-computer-programming/</link>
      <pubDate>Wed, 27 Mar 2019 21:32:53 +0100</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/psychology-computer-programming/</guid>
      <description>Recently I have read The Psychology of Computer Programming, written by Gerald M. Weinberg. The book was originally published in 1971, though it got republished in 2011. (I read it on a kindle paperwhite and it looked great! So don&amp;rsquo;t worry about the age of the book in case you fear it won&amp;rsquo;t look good in e-book format).
Even though the book was written in a time before the public internet, Java, Javascript, smartphones and many more things we take for granted today, a lot of the content still rings true today.</description>
    </item>
    
    <item>
      <title>Version 2.0 of my blog :)</title>
      <link>https://dylanmeeus.github.io/posts/new-blog/</link>
      <pubDate>Fri, 22 Mar 2019 23:33:01 +0100</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/new-blog/</guid>
      <description>The past After two years of not having written anything for my blog, I&amp;rsquo;ve decided it was time to start anew.
My old blog was created using WordPress in mid-2011, it was the first blog that was hosted on a machine a friend and I rented rather than blogspot. Whilst the blog served it&amp;rsquo;s purpose and was home to 7 years of content-creation, I felt like it was time to change things up.</description>
    </item>
    
  </channel>
</rss>