<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>posts on Dylan Meeus</title>
    <link>https://dylanmeeus.github.io/categories/posts/</link>
    <description>Recent content in posts on Dylan Meeus</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 31 Aug 2020 21:01:02 +0200</lastBuildDate>
    
	<atom:link href="https://dylanmeeus.github.io/categories/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Audio From Scratch With Go: Waveform tables</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt9/</link>
      <pubDate>Mon, 31 Aug 2020 21:01:02 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt9/</guid>
      <description>In the previous post the aim was to synthesize different waveforms, such as triangle waves and square waves. While this implementation gives us a good start, it is not as performant as we would like. All these waveforms were cyclical, so there was not an actual need to always calculate the right value in the moment.
The solution when you don&amp;rsquo;t want to recalculate something over and over is caching, and in the case of audio progamming we are going to store the waveform in a &amp;lsquo;table&amp;rsquo;, through which we can look up the values with an Oscillator.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Waveform synthesis</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt8/</link>
      <pubDate>Wed, 19 Aug 2020 20:45:50 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt8/</guid>
      <description>In the previous posts we first looked at how we can generate a sine wave as &amp;lsquo;raw&amp;rsquo; floats and interpret them using ffplay. Later we explored how to read / write .wave files and how to extract and create &amp;lsquo;automation tracks&amp;rsquo; using breakpoints.
As you might have noticed, we&amp;rsquo;ve never actually created .wave files from scratch with our own sound data. So, it&amp;rsquo;s about time to change that. In this blogpost we&amp;rsquo;ll look at how we can create a variety of basic soundwaves.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Extracting Breakpoints</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt7/</link>
      <pubDate>Sat, 08 Aug 2020 01:01:37 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt7/</guid>
      <description>So far everything we&amp;rsquo;ve done with breakpoints involved us creating a breakpoint file and using this to automate part of a track. Now we&amp;rsquo;ll take a look at how we can take an existing track and extract some breakpoints from this. For this post, we&amp;rsquo;ll take a look at extracting the amplitudes from the .wave files, as this is one of the most straightforward properties that we can extract.
There is nothing here that we&amp;rsquo;ve not seen in the previous posts, but rather we are going to combine what we&amp;rsquo;ve already learned to create a new tool to do this.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Automated Constant-Power Panning</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt6/</link>
      <pubDate>Thu, 06 Aug 2020 20:05:53 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt6/</guid>
      <description>In a previous post we have looked at how we can turn a mono audio signal into a stereo signal with an applied pan. One drawback of this program was that it was not possible to change the pan throughout the track, meaning that once a pan had been selected it would be applied to the entire song.
Now that we have implemented breakpoints, we can start looking at changing the pan (and other properties) throughout the duration of the track.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Breakpoints</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt5/</link>
      <pubDate>Tue, 28 Jul 2020 20:31:44 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt5/</guid>
      <description>Audio Breakpoints To clear up a potential mistake, this blogpost is about breakpoints for audio files, not the ones we use for debugging code ;-). A breakpoint file forms the basis for what is often called &amp;lsquo;envelopes&amp;rsquo; or &amp;lsquo;automation tracks&amp;rsquo; in DAWs.
They are simple files that contain pairs of timestamp:value data. With this simple structure, they allow us to specify what certain properties of the sound file should look like at various points in time.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Stereo panning</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt4/</link>
      <pubDate>Mon, 20 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt4/</guid>
      <description>In the previous post we have written code to change the amplitude of wave files.
Now we&amp;rsquo;ll take a look at how we can turn a mono wave file into a stereo wave file with optional panning, and explore how this is represented internally by the WAVE file format.
Channels The raw audio data inside a WAVE file consists of multiple frames. For now, we have called them &amp;lsquo;samples&amp;rsquo; although that is strictly speaking not entirely correct.</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Changing the amplitude</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt3/</link>
      <pubDate>Sat, 18 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt3/</guid>
      <description>In the previous post we have written code to read and write WAVE files. So now it&amp;rsquo;s time to start using this functionality to actually manipulate some sound. The goal of this post is simple, we want to change the amplitude of a given .wave file.
For this, I will import the library we wrote in Part 2.
The code for this post is also on Github.
Changing amplitudes The program to change the amplitude will require three inputs:</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Anatomy of a wave (file)</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</link>
      <pubDate>Mon, 13 Jul 2020 19:15:32 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt2/</guid>
      <description>In our last post we have looked at how we can create a simple binary sound file. By creating a sine wave with exponential decay, we can get the effect of a single note playing.
It&amp;rsquo;s good to know what these types of files look like. In the real world however you&amp;rsquo;ll usually encounter files that are a bit more complex. One of the common formats to find audio in is the WAVE file format, normally denoted with the extension .</description>
    </item>
    
    <item>
      <title>Audio From Scratch With Go: Generating first sounds</title>
      <link>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</link>
      <pubDate>Mon, 13 Jul 2020 18:43:21 +0200</pubDate>
      
      <guid>https://dylanmeeus.github.io/posts/audio-from-scratch-pt1/</guid>
      <description>Audio from scratch: generating sound In my &amp;lsquo;audio from scratch&amp;rsquo; series we will take a look at various ways in which we can manipulate audio data with Go. We&amp;rsquo;ll look at the anatomy of a wave file, how to apply stereo panning, converting mono files to stereo, how to work with breakpoint files through linear interpolation, etc.
But, in this post weâ€™ll be using Go to create sound from scratch in binary format.</description>
    </item>
    
  </channel>
</rss>